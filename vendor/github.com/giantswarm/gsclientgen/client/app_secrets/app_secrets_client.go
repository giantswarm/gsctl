// Code generated by go-swagger; DO NOT EDIT.

package app_secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new app secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateClusterAppSecret creates secret

This operation allows you to create a Secret for a specific app. The app does
not have to exist before hand.

If the app does exist, this endpoint will ensure that the App CR gets it's
`spec.user_config.secret` field set correctly.

However, if the app exists and the `spec.user_config.secret` is already set to something,
then this request will fail. You will in that case most likely want to
update the Secret using the `PATCH /v4/clusters/{cluster_id}/apps/{app_name}/secret/`
endpoint.


### Example POST request
```json
  {
    "secret": "value"
  }
```

*/
func (a *Client) CreateClusterAppSecret(params *CreateClusterAppSecretParams, authInfo runtime.ClientAuthInfoWriter) (*CreateClusterAppSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterAppSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterAppSecret",
		Method:             "PUT",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/secret/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterAppSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateClusterAppSecretOK), nil

}

/*
DeleteClusterAppSecret deletes a secret

This operation allows a user to delete an app's Secret if it has been named according to the convention of {app-name}-user-secrets and
stored in the cluster ID namespace.

Calling this endpoint will delete the Secret, and also remove the reference to the Secret in the (spec.user_config.secret field) from the app.

*/
func (a *Client) DeleteClusterAppSecret(params *DeleteClusterAppSecretParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClusterAppSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterAppSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterAppSecret",
		Method:             "DELETE",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/secret/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterAppSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterAppSecretOK), nil

}

/*
GetClusterAppSecret gets secret

This operation allows you to fetch the Secret associated
with an app.

*/
func (a *Client) GetClusterAppSecret(params *GetClusterAppSecretParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterAppSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterAppSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterAppSecret",
		Method:             "GET",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/secret/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterAppSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterAppSecretOK), nil

}

/*
ModifyClusterAppSecret modifies secret

This operation allows you to modify the Secret for a specific app.
It's only possible to modify Secrets that have been named according to the convention of
{app-name}-user-secrets and stored in the cluster ID namespace.

The full values key of the Secret will be replaced by the JSON body
of your request.

### Example PATCH request
```json
  {
    "secret": "new-value"
  }
```

If the Secret contained content like:

```json
  {
    "secret": "old-value",
    "secret2": "another-old-value"
  }
```

Then the "secret2" will be removed, and "secret" will be set to "new-value"

*/
func (a *Client) ModifyClusterAppSecret(params *ModifyClusterAppSecretParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterAppSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterAppSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyClusterAppSecret",
		Method:             "PATCH",
		PathPattern:        "/v4/clusters/{cluster_id}/apps/{app_name}/secret/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterAppSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterAppSecretOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
