// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddCluster creates cluster

This operation is used to create a new Kubernetes cluster for an
organization. The desired configuration can be specified using the
__cluster definition format__ (see
[external documentation](https://github.com/giantswarm/api-spec/blob/master/details/CLUSTER_DEFINITION.md)
for details).

### Cluster definition

The cluster definition format allows to set a number of optional
configuration details, like memory size and number of CPU cores.
However, one attribute is __mandatory__ upon creation: The `owner`
attribute must carry the name of the organization the cluster will
belong to. Note that the acting user must be a member of that
organization in order to create a cluster.

It is *recommended* to also specify the `name` attribute to give the
cluster a friendly name, like e. g. "Development Cluster".

Additional definition attributes can be used. Where attributes are
omitted, default configuration values will be applied. For example, if
no `release_version` is specified, the most recent version is used.

The specification of worker nodes, for example the instance type on AWS,
can be provided via the `workers` array. Here, the first item of the
array is used as a specification for all worker nodes. For any missing
specification attribute, defaults are assumed. Check out the
[getInfo](#operation/getInfo) operation for more info about defaults.

### Availability Zones (AWS only)

The number of `availability_zones` affects the total number of nodes
that can be created in the cluster. The number of availability zones
splits the IP range that can be used for the cluster in multiple smaller
IP ranges. The [getInfo](#operation/getInfo) endpoint provides more
details about the cluster IP range.

__IP range example:__

If a cluster gets a `/22` range (1022 hosts) and the cluster should be
spawned across 3 availability zones, the range will then be split up
into four `/24` (254 hosts) that can be assigned to four different
availability zones. One range will stay unused because network
addresses must be powers of two. See [CIDR addressing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).
Each of the `/24` will then be split into two `/25` (126 hosts) for
public and private subnets. The private subnet is used for nodes and
internal loadbalancer (only if you create them within Kubernetes). The
public subnet will be used by the public loadbalancers. Tenant cluster
come with two public loadbalancers by default. One for the Kubernetes API
and one for Ingress.

__Note:__ AWS ELBs can take up to 8 IP addresses due to the way how
they scale. In addition to this, every AWS subnet has four first
addresses (.1-.4) reserved for internal use.

### Initial cluster size and autoscaling

The API allows to define the cluster size on creation using the
`scaling` attribute, setting a minimum and maximum worker node count.

For releases starting from 6.2.0 (on AWS), the cluster size is controlled
by the [Kubernetes Autoscaler](https://github.com/kubernetes/autoscaler)
within the limits defined by the `scaling` setting. This setting can
also be modified any time later in the cluster lifecycle.

By setting both the minimum and maximum to the same value, autoscaling
is effectively disabled. This is also the default behaviour when no
initial cluster size is given, or when clusters are upgraded from
releases before 6.2.0.

Until autoscaling is available on providers other than AWS, for Azure
and KVM (on-premises) the `min` and `max` scaling value must be
identical. The same is true for tenant clusters using a release
before 6.2.0 on AWS.

### Backward compatibility note

Before the introduction of autoscaling and the `scaling` attribute, the
number of worker nodes could be determined via the number of items
contained in the `workers` array. This behaviour will be still accepted
for a transition period, but only if the `scaling` attribute is _not_
provided in the request. In this case, a `workers` array length of 5,
for example, will be translated to a scaling where both `min` and `max`
are set to 5, which effectively turns off autoscaling.

*/
func (a *Client) AddCluster(params *AddClusterParams, authInfo runtime.ClientAuthInfoWriter) (*AddClusterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCluster",
		Method:             "POST",
		PathPattern:        "/v4/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddClusterCreated), nil

}

/*
DeleteCluster deletes cluster

This operation allows to delete a cluster.

__Caution:__ Deleting a cluster causes the termination of all workloads running on the cluster. Data stored on the worker nodes will be lost. There is no way to undo this operation.

The response is sent as soon as the request is validated.
At that point, workloads might still be running on the cluster and may be accessible for a little wile, until the cluster is actually deleted.

*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "DELETE",
		PathPattern:        "/v4/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterAccepted), nil

}

/*
GetCluster gets cluster details

This operation allows to obtain most available details on a particular
cluster.

__Deprecation note:__ The `workers` attribute will be removed by
from this operation's response in the near future. Please use the
[getClusterStatus](#operation/getClusterStatus) operation instead to
get up-to-date details on the workers nodes in a cluster.

*/
func (a *Client) GetCluster(params *GetClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCluster",
		Method:             "GET",
		PathPattern:        "/v4/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterOK), nil

}

/*
GetClusterStatus gets cluster status

Returns an object about a cluster's current state and past status transitions.

This endpoint exposes the status content of the Kubernetes resources representing
a cluster in the corresponding custom resource. That is, depending on the provider:

- [awsconfig.provider.giantswarm.io](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig)
- [azureconfig.provider.giantswarm.io](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AzureConfig)
- [kvmconfig.provider.giantswarm.io](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#KVMConfig)

Note that structure and style differ from the rest of the v4 API. Also note that
the structure depends on the release version and changes can be expected frequently.

*/
func (a *Client) GetClusterStatus(params *GetClusterStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterStatus",
		Method:             "GET",
		PathPattern:        "/v4/clusters/{cluster_id}/status/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterStatusOK), nil

}

/*
GetClusters gets clusters

This operation fetches a list of clusters.

The result depends on the permissions of the user.
A normal user will get all the clusters the user has access
to, via organization membership.
A user with admin permission will receive a list of all existing
clusters.

The result array items are sparse representations of the cluster objects.
To fetch more details on a cluster, use the
[getCluster](#operation/getCluster) and
[getClusterStatus](#operation/getClusterStatus) operations.

*/
func (a *Client) GetClusters(params *GetClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusters",
		Method:             "GET",
		PathPattern:        "/v4/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersOK), nil

}

/*
ModifyCluster modifies cluster

This operation allows to modify an existing cluster.

A cluster modification is performed by submitting a `PATCH` request
to the cluster resource (as described in the
[addCluster](#operation/addCluster) and [getCluster](#operation/getCluster))
in form of a [JSON Patch Merge
(RFC 7386)](https://tools.ietf.org/html/rfc7386). This means, only the
attributes to be modified have to be contained in the request body.

The following attributes can be modified:

- `name`: Rename the cluster to something more fitting.

- `owner`: Changing the owner organization name means to change cluster
ownership from one organization to another. The user performing the
request has to be a member of both organizations.

- `release_version`: By changing this attribute you can upgrade a
cluster to a newer
[release](https://docs.giantswarm.io/api/#tag/releases).

- `scaling`: Adjust the cluster node limits to make use of auto scaling
or to have full control over the node count. The latter can be
achieved by setting `min` and `max` to the same values. Note that
setting `min` and `max` to different values (effectively enabling
autoscaling) is only available on AWS with releases from 6.2.0.

- `workers` (deprecated): For backward compatibility reasons, it is
possible to provide this attribute as an array, where the number of
items contained in the array determines the intended number of worker
nodes in the cluster. The item count will be applied as both `min` and
`max` value of the scaling limits, effectively disabling autoscaling.
This requires the `scaling` attribute must not be present in the same
request.

### Limitations

- As of now, existing worker nodes cannot be modified.
- The number of availability zones cannot be modified.
- When removing nodes (scaling down), it is not possible to determine
which nodes will be removed.

*/
func (a *Client) ModifyCluster(params *ModifyClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyCluster",
		Method:             "PATCH",
		PathPattern:        "/v4/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
