// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddCluster creates cluster v4

This operation is used to create a new Kubernetes cluster or
"tenant cluster".

__Providers__:
<span class="badge azure">Azure</span>
<span class="badge kvm">KVM</span>
<span class="badge aws">AWS*</span>
&ndash; AWS support ends with release version `TODO`. For AWS clusters using
release `TODO` and higher, please refer to the
[v5 equivalent](#operation/addClusterV5).

### Cluster definition

The cluster definition format allows to set a number of optional
configuration details, like worker node configuration, with node
specification depending on the provider (e. g. on <span class="badge azure">Azure</span> the
VM size, or on <span class="badge kvm">KVM</span> the memory size and number of CPU cores).

One attribute is __mandatory__ upon creation: The `owner`
attribute must carry the name of the organization the cluster will
belong to. Note that the acting user must be a member of that
organization in order to create a cluster.

For all other attributes, defaults will be applied if the attribute
is not set. Check out the [getInfo](#operation/getInfo) operation for
more info about defaults. If no `release_version` is set, the latest
release version available for the provider will be used.

*/
func (a *Client) AddCluster(params *AddClusterParams, authInfo runtime.ClientAuthInfoWriter) (*AddClusterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCluster",
		Method:             "POST",
		PathPattern:        "/v4/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddClusterCreated), nil

}

/*
AddClusterV5 creates cluster v5

Allows to create most recent clusters on AWS installations.

__Providers__:
<span class="badge aws">AWS*</span>
&ndash; Only supports release `TODO` and higher on AWS. For other
providers, please refer to the [v4 equivalent](#operation/addCluster).

### Node pools

In the Giant Swarm API v5, worker nodes are grouped into pools of worker
nodes where all nodes share the same configuration.

When creating a cluster without submitting the `nodepools` attribute,
or with its value being an empty array, one node pool with default
configuration will be created.

Node pools can be created, deleted and modified during the entire
lifetime of a cluster.

See
[node pools](#tag/nodepools) and
[Create node pool](#operation/addNodePool) for details.

*/
func (a *Client) AddClusterV5(params *AddClusterV5Params, authInfo runtime.ClientAuthInfoWriter) (*AddClusterV5Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClusterV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addClusterV5",
		Method:             "POST",
		PathPattern:        "/v5/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddClusterV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddClusterV5Created), nil

}

/*
DeleteCluster deletes cluster

This operation triggers deleting a cluster with all resources attached to it.

__Providers__:
<span class="badge azure">Azure</span>
<span class="badge kvm">KVM</span>
<span class="badge aws">AWS</span>
&ndash; All providers supported.

Deleting a cluster causes the termination of all workloads running on
the cluster. Data stored on the worker nodes will be lost. On AWS, node
pools belonging to the cluster are deleted, too. There is no way to undo
this operation.

The response is sent as soon as the request is validated.
At that point, workloads might still be running on the cluster and may be accessible for a little wile, until the cluster is actually deleted.

*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteClusterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "DELETE",
		PathPattern:        "/v4/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterAccepted), nil

}

/*
GetCluster gets cluster details v4

This operation allows to obtain basic details on a particular cluster.

__Providers__:
<span class="badge azure">Azure</span>
<span class="badge kvm">KVM</span>
<span class="badge aws">AWS*</span>
&ndash; AWS support ends with release version `TODO`. For AWS clusters
using release `TODO` and higher, please refer to the
[v5 equivalent](#operation/getClusterV5).

*/
func (a *Client) GetCluster(params *GetClusterParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCluster",
		Method:             "GET",
		PathPattern:        "/v4/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterOK), nil

}

/*
GetClusterStatus gets cluster status

Returns an object about a cluster's current state and past status transitions.

__Providers__:
<span class="badge azure">Azure</span>
<span class="badge kvm">KVM</span>
<span class="badge aws">AWS</span>
&ndash; All providers supported.

This endpoint exposes the status content of the Kubernetes resources representing
a cluster in the corresponding custom resource. That is, depending on the provider:

- [`awsconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig)
- [`azureconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AzureConfig)
- [`kvmconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#KVMConfig)

Note that structure and style differ from the rest of the v4 API. Also note that
the structure depends on the release version and changes can be expected frequently.

*/
func (a *Client) GetClusterStatus(params *GetClusterStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetClusterStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterStatus",
		Method:             "GET",
		PathPattern:        "/v4/clusters/{cluster_id}/status/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterStatusOK), nil

}

/*
GetClusterStatusV5 gets cluster status

Returns an object about a cluster's current state and past status transitions.

__Providers__:
<span class="badge aws">AWS</span>
&ndash; Only supports release `TODO` and higher on AWS.

This endpoint exposes the status content of the Kubernetes resources representing
a cluster in the corresponding custom resource:

[`awsconfig.provider.giantswarm.io`](https://godoc.org/github.com/giantswarm/apiextensions/pkg/apis/provider/v1alpha1#AWSConfig)

Note that structure and style differ from the rest of the v5 API. Also note that
the structure depends on the release version and changes can be expected frequently.

## TODO

- Adapt the link above, as the current one is not correct
- Give response 200 example

*/
func (a *Client) GetClusterStatusV5(params *GetClusterStatusV5Params, authInfo runtime.ClientAuthInfoWriter) (*GetClusterStatusV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterStatusV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterStatusV5",
		Method:             "GET",
		PathPattern:        "/v5/clusters/{cluster_id}/status/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterStatusV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterStatusV5OK), nil

}

/*
GetClusterV5 gets cluster details v5

Allows to retrieve cluster details on AWS installations.

__Providers__:
<span class="badge aws">AWS*</span>
&ndash; Only supports release `TODO` and higher on AWS. For other
providers, please refer to the [v4 equivalent](#operation/getCluster).

*/
func (a *Client) GetClusterV5(params *GetClusterV5Params, authInfo runtime.ClientAuthInfoWriter) (*GetClusterV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterV5",
		Method:             "GET",
		PathPattern:        "/v5/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterV5OK), nil

}

/*
GetClusters gets clusters

This operation fetches a list of clusters.

__Providers__:
<span class="badge aws">AWS</span>
<span class="badge azure">Azure</span>
<span class="badge kvm">KVM</span>
&ndash; All providers supported

The result depends on the permissions of the user.
A normal user will get all the clusters the user has access
to, via organization membership.
A user with admin permission will receive a list of all existing
clusters.

The result array items are sparse representations of the cluster
objects. To fetch more details on a cluster, use the following
operations:

- [getCluster](#operation/getCluster) or [getClusterV5](#operation/getClusterV5) for cluster details
- [getNodePools](#operation/getNodePools) for node pool details
- [getClusterStatus](#operation/getClusterStatus) operations.

*/
func (a *Client) GetClusters(params *GetClustersParams, authInfo runtime.ClientAuthInfoWriter) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusters",
		Method:             "GET",
		PathPattern:        "/v4/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersOK), nil

}

/*
ModifyCluster modifies cluster v4

This operation allows to modify an existing cluster.

__Providers__:
<span class="badge azure">Azure</span>
<span class="badge kvm">KVM</span>
<span class="badge aws">AWS*</span>
&ndash; AWS support ends with release version `TODO`. For AWS clusters
using release `TODO` and higher, please refer to the
[v5 equivalent](#operation/modifyClusterV5).

A cluster modification is performed by submitting a `PATCH` request
to the cluster resource (as described in the
[addCluster](#operation/addCluster) and [getCluster](#operation/getCluster))
in form of a [JSON Patch Merge
(RFC 7386)](https://tools.ietf.org/html/rfc7386). This means, only the
attributes to be modified have to be contained in the request body.

The following attributes can be modified:

- `name`: Rename the cluster to something more fitting.

- `owner`: Changing the owner organization name means to change cluster
ownership from one organization to another. The user performing the
request has to be a member of both organizations.

- `release_version`: By changing this attribute you can upgrade a
cluster to a newer
[release](https://docs.giantswarm.io/api/#tag/releases).

- `scaling`: Adjust the cluster node limits to make use of auto scaling
or to have full control over the node count. The latter can be
achieved by setting `min` and `max` to the same values. Note that
setting `min` and `max` to different values (effectively enabling
autoscaling) is only available on AWS with releases from 6.2.0.

 - `workers` (deprecated): For backward compatibility reasons, it is
possible to provide this attribute as an array, where the number of
items contained in the array determines the intended number of worker
nodes in the cluster. The item count will be applied as both `min` and
`max` value of the scaling limits, effectively disabling autoscaling.
This requires the `scaling` attribute must not be present in the same
request.

### Limitations

- As of now, existing worker nodes cannot be modified.
- The number of availability zones cannot be modified.
- When removing nodes (scaling down), it is not possible to determine
which nodes will be removed.

*/
func (a *Client) ModifyCluster(params *ModifyClusterParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyCluster",
		Method:             "PATCH",
		PathPattern:        "/v4/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterOK), nil

}

/*
ModifyClusterV5 modifies cluster v5

Allows to change cluster properties on AWS installations.

__Providers__:
<span class="badge aws">AWS*</span>
&ndash; Only supports release `TODO` and higher on AWS. For other
providers, please refer to the [v4 equivalent](#operation/modifyCluster).

*/
func (a *Client) ModifyClusterV5(params *ModifyClusterV5Params, authInfo runtime.ClientAuthInfoWriter) (*ModifyClusterV5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterV5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyClusterV5",
		Method:             "PATCH",
		PathPattern:        "/v5/clusters/{cluster_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterV5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterV5OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
