// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddCredentials sets credentials

Add a set of credentials to the organization allowing the creation and
operation of clusters within a cloud provider account/subscription.

The actual type of these credentials depends on the cloud provider the
installation is running on. AWS and Azure are currently supported.

Credentials in an organization are immutable. Each organization can only
have one set of credentials.

Once credentials have been set for an organization, they are used for
every new cluster that will be created for the organization.

### Example request body for AWS

```json
{
  "provider": "aws",
  "aws": {
    "roles": {
      "admin": "arn:aws:iam::123456789012:role/GiantSwarmAdmin",
      "awsoperator": "arn:aws:iam::123456789012:role/GiantSwarmAWSOperator"
    }
  }
}
```

### Example request body for Azure

```json
{
  "provider": "azure",
  "azure": {
    "credential": {
      "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
      "secret_key": "720e38f7-3af4-463c-9313-abcdf2ead612",
      "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
      "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
    }
  }
}
```

*/
func (a *Client) AddCredentials(params *AddCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*AddCredentialsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCredentials",
		Method:             "POST",
		PathPattern:        "/v4/organizations/{organization_id}/credentials/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddCredentialsCreated), nil

}

/*
AddOrganization creates an organization

This operation allows a user to create an organization.

*/
func (a *Client) AddOrganization(params *AddOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*AddOrganizationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addOrganization",
		Method:             "PUT",
		PathPattern:        "/v4/organizations/{organization_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddOrganizationCreated), nil

}

/*
DeleteOrganization deletes an organization

This operation allows a user to delete an organization that they are a member of.
Admin users can delete any organization.

*/
func (a *Client) DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/v4/organizations/{organization_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationOK), nil

}

/*
GetCredential gets credential details

Returns details for a particular set of credentials, identified by its
ID. The returned data does not contain any secrets (i. e.
passphrase, secret key). For more information on credentials, see
[Set credentials](#operation/addCredentials).

### Example response body for AWS

```json
{
  "id": "a1b2c3",
  "provider": "aws",
  "aws": {
    "roles": {
      "admin": "arn:aws:iam::123456789012:role/GiantSwarmAdmin",
      "awsoperator": "arn:aws:iam::123456789012:role/GiantSwarmAWSOperator"
    }
  }
}
```

### Example response body for Azure

```json
{
  "id": "a1b2c3",
  "provider": "azure",
  "azure": {
    "credential": {
      "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
      "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
      "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
    }
  }
}
```

*/
func (a *Client) GetCredential(params *GetCredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCredential",
		Method:             "GET",
		PathPattern:        "/v4/organizations/{organization_id}/credentials/{credential_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCredentialOK), nil

}

/*
GetCredentials gets credentials

Returns credentials for an organization, if available.
For more information on credentials,
see [Set credentials](#operation/addCredentials).

Here is another paragraph.

### Example response body for AWS

```json
[
  {
    "id": "a1b2c3",
    "provider": "aws",
    "aws": {
      "roles": {
        "admin": "arn:aws:iam::123456789012:role/GiantSwarmAdmin",
        "awsoperator": "arn:aws:iam::123456789012:role/GiantSwarmAWSOperator"
      }
    }
  }
]
```

### Example response body for Azure

```json
[
  {
    "id": "a1b2c3",
    "provider": "azure",
    "azure": {
      "credential": {
        "client_id": "c93bf55e-5bf7-4966-ad2b-e6f6e7721d50",
        "subscription_id": "b388b7c7-4479-4040-9ac5-1e13edd6b1cd",
        "tenant_id": "3dd2e94a-92ba-434c-99be-32bb65864a99"
      }
    }
  }
]
```

*/
func (a *Client) GetCredentials(params *GetCredentialsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCredentials",
		Method:             "GET",
		PathPattern:        "/v4/organizations/{organization_id}/credentials/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCredentialsOK), nil

}

/*
GetOrganization gets organization details

This operation fetches organization details.

*/
func (a *Client) GetOrganization(params *GetOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/v4/organizations/{organization_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationOK), nil

}

/*
GetOrganizations gets organizations

This operation allows to fetch a list of organizations the user is a
member of. In the case of an admin user, the result includes all
existing organizations.

*/
func (a *Client) GetOrganizations(params *GetOrganizationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizations",
		Method:             "GET",
		PathPattern:        "/v4/organizations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsOK), nil

}

/*
ModifyOrganization modifies organization

This operation allows you to modify an existing organization. You must be
a member of the organization or an admin in order to use this endpoint.

The following attributes can be modified:

- `members`: By modifying the array of members, members can be added to or removed from the organization

The request body must conform with the [JSON Patch Merge (RFC 7386)](https://tools.ietf.org/html/rfc7386) standard.
Requests have to be sent with the `Content-Type: application/merge-patch+json` header.

The full request must be valid before it will be executed, currently this
means every member you attempt to add to the organization must actually
exist in the system. If any member you attempt to add is invalid, the entire
patch operation will fail, no members will be added or removed, and an error message
will explain which members in your request are invalid.

*/
func (a *Client) ModifyOrganization(params *ModifyOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*ModifyOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyOrganization",
		Method:             "PATCH",
		PathPattern:        "/v4/organizations/{organization_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
