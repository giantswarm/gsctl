// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V4InfoResponse v4 info response
// swagger:model v4InfoResponse
type V4InfoResponse struct {

	// features
	Features *V4InfoResponseFeatures `json:"features,omitempty"`

	// general
	// Required: true
	General *V4InfoResponseGeneral `json:"general"`

	// stats
	Stats *V4InfoResponseStats `json:"stats,omitempty"`

	// workers
	Workers *V4InfoResponseWorkers `json:"workers,omitempty"`
}

// Validate validates this v4 info response
func (m *V4InfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V4InfoResponse) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	if m.Features != nil {
		if err := m.Features.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("features")
			}
			return err
		}
	}

	return nil
}

func (m *V4InfoResponse) validateGeneral(formats strfmt.Registry) error {

	if err := validate.Required("general", "body", m.General); err != nil {
		return err
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *V4InfoResponse) validateStats(formats strfmt.Registry) error {

	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *V4InfoResponse) validateWorkers(formats strfmt.Registry) error {

	if swag.IsZero(m.Workers) { // not required
		return nil
	}

	if m.Workers != nil {
		if err := m.Workers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V4InfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V4InfoResponse) UnmarshalBinary(b []byte) error {
	var res V4InfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
