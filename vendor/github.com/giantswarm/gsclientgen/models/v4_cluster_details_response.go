// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V4ClusterDetailsResponse Response model showing details of a cluster
// swagger:model v4ClusterDetailsResponse
type V4ClusterDetailsResponse struct {

	// URI of the Kubernetes API endpoint
	APIEndpoint string `json:"api_endpoint,omitempty"`

	// List of availability zones a cluster is spread across.
	AvailabilityZones []string `json:"availability_zones"`

	// Date/time of cluster creation
	CreateDate string `json:"create_date,omitempty"`

	// ID of the credentials used to operate the cluster (only on AWS and
	// Azure). See [Set credentials](#operation/addCredentials) for details.
	//
	CredentialID string `json:"credential_id,omitempty"`

	// Unique cluster identifier
	ID string `json:"id,omitempty"`

	// kvm
	Kvm *V4ClusterDetailsResponseKvm `json:"kvm,omitempty"`

	// Cluster name
	Name string `json:"name,omitempty"`

	// Name of the organization owning the cluster
	Owner string `json:"owner,omitempty"`

	// The [release](https://docs.giantswarm.io/api/#tag/releases) version
	// currently running this cluster.
	//
	ReleaseVersion string `json:"release_version,omitempty"`

	// scaling
	Scaling *V4ClusterDetailsResponseScaling `json:"scaling,omitempty"`

	// Information about worker nodes in the cluster (deprecated)
	Workers []*V4ClusterDetailsResponseWorkersItems `json:"workers"`
}

// Validate validates this v4 cluster details response
func (m *V4ClusterDetailsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKvm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V4ClusterDetailsResponse) validateKvm(formats strfmt.Registry) error {

	if swag.IsZero(m.Kvm) { // not required
		return nil
	}

	if m.Kvm != nil {
		if err := m.Kvm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvm")
			}
			return err
		}
	}

	return nil
}

func (m *V4ClusterDetailsResponse) validateScaling(formats strfmt.Registry) error {

	if swag.IsZero(m.Scaling) { // not required
		return nil
	}

	if m.Scaling != nil {
		if err := m.Scaling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaling")
			}
			return err
		}
	}

	return nil
}

func (m *V4ClusterDetailsResponse) validateWorkers(formats strfmt.Registry) error {

	if swag.IsZero(m.Workers) { // not required
		return nil
	}

	for i := 0; i < len(m.Workers); i++ {
		if swag.IsZero(m.Workers[i]) { // not required
			continue
		}

		if m.Workers[i] != nil {
			if err := m.Workers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V4ClusterDetailsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V4ClusterDetailsResponse) UnmarshalBinary(b []byte) error {
	var res V4ClusterDetailsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
